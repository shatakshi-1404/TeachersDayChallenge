Beginner
#include <vector>
#include <unordered_map>

using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> num_map; 
        
        for (int i = 0; i < nums.size(); ++i) {
            int complement = target - nums[i];
            
            if (num_map.find(complement) != num_map.end()) {
                return {num_map[complement], i};
            }
            
            num_map[nums[i]] = i;
        }
        
        return {}; 
    }
};
Advanced 1
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxProfit =0, bestBuy =prices[0];

        for(int i=1; i<prices.size();i++){
            if(prices[i]>bestBuy){
                maxProfit=max(maxProfit,prices[i]-bestBuy);

            }
            bestBuy =min(bestBuy,prices[i]);


        }
        return maxProfit;
        
    }
};
Advanced 2
#include <stack>
#include <climits>

class MinStack {
private:
    std::stack<int> main_stack;
    std::stack<int> min_stack;
    int current_min;

public:
    MinStack() {
        current_min = INT_MAX;
    }

    void push(int val) {
        main_stack.push(val);
        if (val <= current_min) {
            min_stack.push(current_min); // Store previous min
            current_min = val;           // Update current min
        }
    }

    void pop() {
        if (main_stack.top() == current_min) {
            current_min = min_stack.top(); // Restore previous min
            min_stack.pop();
        }
        main_stack.pop();
    }

    int top() {
        return main_stack.top();
    }

    int getMin() {
        return current_min;
    }
};
